{
  "toncenter-http-api-v2.npm-ton.mainnet": "import { TonClient, Address } from \"ton\";\r\nimport { getHttpEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpEndpoint(); // get the decentralized RPC endpoint\r\nconst client = new TonClient({ endpoint }); // initialize ton library",
  "toncenter-http-api-v2.npm-ton.testnet": "import { TonClient, Address } from \"ton\";\r\nimport { getHttpEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpEndpoint({\r\n  network: \"testnet\" \r\n}); // get the decentralized RPC endpoint\r\nconst client = new TonClient({ endpoint }); // initialize ton library",
  "toncenter-http-api-v2.npm-tonweb.mainnet": "import TonWeb from \"tonweb\";\r\nimport { getHttpEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpEndpoint(); // get the decentralized RPC endpoint\r\nconst tonweb = new TonWeb(new TonWeb.HttpProvider(endpoint)); // initialize tonweb library",
  "toncenter-http-api-v2.npm-tonweb.testnet": "import TonWeb from \"tonweb\";\r\nimport { getHttpEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpEndpoint({\r\n  network: \"testnet\" \r\n}); // get the decentralized RPC endpoint\r\nconst tonweb = new TonWeb(new TonWeb.HttpProvider(endpoint)); // initialize tonweb library",
  "toncenter-http-api-v2.cdn-tonweb.mainnet": "document.addEventListener('DOMContentLoaded', function () {\r\n  TonGateway.getHttpEndpoint().then(endpoint => {\r\n    // get the decentralized RPC endpoint\r\n    const tonweb = new TonWeb(new TonWeb.HttpProvider(endpoint));\r\n    // initialize tonweb library\r\n  });\r\n});",
  "toncenter-http-api-v2.cdn-tonweb.testnet": "document.addEventListener('DOMContentLoaded', function () {\r\n  TonGateway.getHttpEndpoint({\r\n    network: 'testnet',\r\n  }).then(endpoint => {\r\n    // get the decentralized RPC endpoint\r\n    const tonweb = new TonWeb(new TonWeb.HttpProvider(endpoint)); // initialize tonweb library\r\n  });\r\n});",
  "tonhub-http-api-v4.npm-ton.mainnet": "import { TonClient4 } from \"ton\";\r\nimport { getHttpV4Endpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpV4Endpoint();\r\nconst client4 = new TonClient4({ endpoint });",
  "tonhub-http-api-v4.npm-ton.testnet": "import { TonClient4 } from \"ton\";\r\nimport { getHttpV4Endpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst endpoint = await getHttpV4Endpoint({\r\n  network: \"testnet\" \r\n});\r\nconst client4 = new TonClient4({ endpoint });",
  "raw-adnl-api.ton-lite-client.mainnet": "import { LiteClient, LiteSingleEngine } from \"ton-lite-client\";\r\nimport { getAdnlProxyEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst { endpoint, publicKey } = await getAdnlProxyEndpoint();\r\nconst engine = new LiteSingleEngine({ host: endpoint, publicKey });\r\nconst client = new LiteClient({ engine });",
  "raw-adnl-api.ton-lite-client.testnet": "import { LiteClient, LiteSingleEngine } from \"ton-lite-client\";\r\nimport { getAdnlProxyEndpoint } from \"@orbs-network/ton-gateway\";\r\n\r\nconst { endpoint, publicKey } = await getAdnlProxyEndpoint({\r\n  network: \"testnet\" \r\n});\r\nconst engine = new LiteSingleEngine({ host: endpoint, publicKey });\r\nconst client = new LiteClient({ engine });"
}